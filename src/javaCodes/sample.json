{
  "completeSolution": "class SimpleCalculator { public static int add(int a, int b) { return a + b; } public static int subtract(int a, int b) { return a - b; } public static int multiply(int a, int b) { return a * b; } public static int divide(int a, int b) { if (b == 0) { throw new ArithmeticException(\"Cannot divide by zero.\"); } return a / b; } public static int modulo(int a, int b) { if (b == 0) { throw new ArithmeticException(\"Cannot modulo by zero.\"); } return a % b; } }\n",
  "testUnit": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SimpleCalculatorTest {\n\n    // ---------- Add ----------\n    @Test\n    void testAddNormal() {\n        assertEquals(5, SimpleCalculator.add(2, 3));\n    }\n\n    @Test\n    void testAddWithNegative() {\n        assertEquals(1, SimpleCalculator.add(3, -2));\n    }\n\n    // ---------- Subtract ----------\n    @Test\n    void testSubtractNormal() {\n        assertEquals(1, SimpleCalculator.subtract(5, 3));\n    }\n\n    @Test\n    void testSubtractNegativeResult() {\n        assertEquals(-2, SimpleCalculator.subtract(3, 5));\n    }\n\n    // ---------- Multiply ----------\n    @Test\n    void testMultiplyNormal() {\n        assertEquals(15, SimpleCalculator.multiply(3, 5));\n    }\n\n    @Test\n    void testMultiplyWithZero() {\n        assertEquals(0, SimpleCalculator.multiply(0, 999));\n    }\n\n    // ---------- Divide ----------\n    @Test\n    void testDivideNormal() {\n        assertEquals(2, SimpleCalculator.divide(6, 3));\n    }\n\n    @Test\n    void testDivideNegative() {\n        assertEquals(-2, SimpleCalculator.divide(6, -3));\n    }\n\n    // ---------- Modulo ----------\n    @Test\n    void testModuloNormal() {\n        assertEquals(1, SimpleCalculator.modulo(10, 3));\n    }\n\n    @Test\n    void testModuloNegativeDividend() {\n        assertEquals(-1, SimpleCalculator.modulo(-10, 3));\n    }\n}",
  "edgeCase": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SimpleCalculatorEdgeCaseTest {\n\n    // ---------- Add ----------\n    @Test\n    void testAddOverflow() {\n        assertEquals(Integer.MIN_VALUE, SimpleCalculator.add(Integer.MAX_VALUE, 1));\n    }\n\n    // ---------- Subtract ----------\n    @Test\n    void testSubtractUnderflow() {\n        assertEquals(Integer.MAX_VALUE, SimpleCalculator.subtract(Integer.MIN_VALUE, 1));\n    }\n\n    // ---------- Multiply ----------\n    @Test\n    void testMultiplyOverflow() {\n        assertEquals(-2, SimpleCalculator.multiply(Integer.MAX_VALUE, 2));\n    }\n\n    // ---------- Divide ----------\n    @Test\n    void testDivideByZero() {\n        assertThrows(ArithmeticException.class, () -> SimpleCalculator.divide(10, 0));\n    }\n\n    // ---------- Modulo ----------\n    @Test\n    void testModuloByZero() {\n        assertThrows(ArithmeticException.class, () -> SimpleCalculator.modulo(10, 0));\n    }\n}"
}


